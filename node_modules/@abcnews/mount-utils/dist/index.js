"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getMountValue: () => getMountValue,
  isMount: () => isMount,
  isUsed: () => isUsed,
  selectMounts: () => selectMounts,
  useMount: () => useMount
});
module.exports = __toCommonJS(src_exports);
var ERROR_MOUNT_ALREADY_USED = "Mount point already used.";
var INSTANCE_ID = (() => {
  let a = 0, b;
  for (b = ""; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-")
    ;
  return b;
})();
var MOUNT_SELECTOR_TEMPLATE = ["[data-mount][id", "]"];
var MOUNT_SELECTOR = MOUNT_SELECTOR_TEMPLATE.join("");
var mountSelectorCache = {};
function cachedMountSelector(cacheKey) {
  if (!mountSelectorCache[cacheKey]) {
    mountSelectorCache[cacheKey] = MOUNT_SELECTOR_TEMPLATE.join(cacheKey);
  }
  return mountSelectorCache[cacheKey];
}
function exactMountSelector(value) {
  return cachedMountSelector(`="${value}"`);
}
function prefixedMountSelector(prefix) {
  return cachedMountSelector(`^="${prefix}"`);
}
function isNode(x) {
  return typeof x === "object" && x instanceof Node;
}
function isElement(x) {
  return isNode(x) && x.nodeType === Node.ELEMENT_NODE;
}
function isMount(x, value, exact = false) {
  return isElement(x) && (value === void 0 ? x.matches(MOUNT_SELECTOR) : exact ? x.matches(exactMountSelector(value)) : x.matches(prefixedMountSelector(value)));
}
function getMountValue(el, value = "") {
  const re = new RegExp(`^${value.replace(/[^\w.\-:]/g, "")}`);
  return (el.getAttribute("id") || el.getAttribute("name") || "").replace(
    re,
    ""
  );
}
function isUsed(mount) {
  return !!mount.dataset.mountUsed;
}
function isUsedBy(mount) {
  return mount.dataset.mountUsed;
}
function useMount(mount) {
  if (mount.dataset.mountUsed && mount.dataset.mountUsed !== INSTANCE_ID)
    throw new Error(ERROR_MOUNT_ALREADY_USED);
  mount.dataset.mountUsed = INSTANCE_ID;
  return mount;
}
function selectMounts(selector, {
  exact = false,
  includeOwnUsed = false,
  markAsUsed = true
} = {}) {
  const s = selector !== void 0 ? exact ? exactMountSelector(selector) : prefixedMountSelector(selector) : MOUNT_SELECTOR;
  return Array.from(document.querySelectorAll(s)).filter((el) => isMount(el)).filter(
    (mount) => includeOwnUsed ? isUsedBy(mount) === INSTANCE_ID || !isUsed(mount) : !isUsed(mount)
  ).map((mount) => {
    markAsUsed && useMount(mount);
    return mount;
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getMountValue,
  isMount,
  isUsed,
  selectMounts,
  useMount
});
//# sourceMappingURL=index.js.map