{"version":3,"sources":["../src/index.ts"],"sourcesContent":["type MountValue = string;\ntype MountValuePrefix = string;\ntype MountSelector = string;\ntype MountSelectorTemplate = string[];\ntype BlockMount = Element & {\n  tagName: 'DIV';\n  id: MountValue;\n  dataset: {\n    mount: string;\n    mountUsed: string | undefined;\n  };\n};\n\nexport type Mount = BlockMount;\n\ntype SelectMountsOptions = {\n  exact?: boolean;\n  includeOwnUsed?: boolean;\n  markAsUsed?: boolean;\n  convertToBlock?: boolean;\n};\n\ninterface MountSelectorCache {\n  [key: string]: MountSelector;\n}\n\nconst ERROR_MOUNT_ALREADY_USED = 'Mount point already used.';\n\n// https://gist.github.com/LeverOne/1308368\n// Small local implementation to avoid a dependency\nconst INSTANCE_ID: string = ((): string => {\n  let a = 0,\n    b;\n  for (\n    b = '';\n    a++ < 36;\n    b +=\n      (a * 51) & 52\n        ? (a ^ 15 ? 8 ^ (Math.random() * (a ^ 20 ? 16 : 4)) : 4).toString(16)\n        : '-'\n  );\n  return b;\n})();\n\nconst MOUNT_SELECTOR_TEMPLATE: MountSelectorTemplate = ['[data-mount][id', ']'];\nconst MOUNT_SELECTOR: MountSelector = MOUNT_SELECTOR_TEMPLATE.join('');\n\nconst mountSelectorCache: MountSelectorCache = {};\n\nfunction cachedMountSelector(cacheKey: string): MountSelector {\n  if (!mountSelectorCache[cacheKey]) {\n    mountSelectorCache[cacheKey] = MOUNT_SELECTOR_TEMPLATE.join(cacheKey);\n  }\n\n  return mountSelectorCache[cacheKey];\n}\n\nfunction exactMountSelector(value: MountValue): MountSelector {\n  return cachedMountSelector(`=\"${value}\"`);\n}\n\nfunction prefixedMountSelector(prefix: MountValuePrefix): MountSelector {\n  return cachedMountSelector(`^=\"${prefix}\"`);\n}\n\nfunction isNode(x: unknown): x is Node {\n  return typeof x === 'object' && x instanceof Node;\n}\n\nfunction isElement(x: unknown): x is Element {\n  return isNode(x) && x.nodeType === Node.ELEMENT_NODE;\n}\n\nexport function isMount(\n  x: unknown,\n  value?: string,\n  exact: boolean = false\n): x is Mount {\n  return (\n    isElement(x) &&\n    (value === undefined\n      ? x.matches(MOUNT_SELECTOR)\n      : exact\n      ? x.matches(exactMountSelector(value))\n      : x.matches(prefixedMountSelector(value)))\n  );\n}\n\nexport function getMountValue(el: Mount, value: string = ''): MountValue {\n  // The filter here is inline with what's possible as anchor IDs in PL https://stash.abc-dev.net.au/projects/PL/repos/pl/commits/01a159f206d1f5f2e34f5424a767fc373a21b669#libraries/rich-text-from-terminus-text/src/visitors/convertHashtagToAnchor.js\n  const re = new RegExp(`^${value.replace(/[^\\w.\\-:]/g, '')}`);\n  return (el.getAttribute('id') || el.getAttribute('name') || '').replace(\n    re,\n    ''\n  );\n}\n\nexport function isUsed(mount: Mount): boolean {\n  return !!mount.dataset.mountUsed;\n}\n\nfunction isUsedBy(mount: Mount): string | undefined {\n  return mount.dataset.mountUsed;\n}\n\nexport function useMount(mount: Mount): Mount {\n  if (mount.dataset.mountUsed && mount.dataset.mountUsed !== INSTANCE_ID)\n    throw new Error(ERROR_MOUNT_ALREADY_USED);\n  mount.dataset.mountUsed = INSTANCE_ID;\n  return mount;\n}\n\nexport function selectMounts(\n  selector?: string,\n  {\n    exact = false,\n    includeOwnUsed = false,\n    markAsUsed = true,\n  }: SelectMountsOptions = {}\n): Mount[] {\n  const s =\n    selector !== undefined\n      ? exact\n        ? exactMountSelector(selector)\n        : prefixedMountSelector(selector)\n      : MOUNT_SELECTOR;\n  return Array.from(document.querySelectorAll(s))\n    .filter((el): el is Mount => isMount(el))\n    .filter((mount) =>\n      includeOwnUsed\n        ? isUsedBy(mount) === INSTANCE_ID || !isUsed(mount)\n        : !isUsed(mount)\n    )\n    .map((mount) => {\n      markAsUsed && useMount(mount);\n      return mount;\n    });\n}\n"],"mappings":";AA0BA,IAAM,2BAA2B;AAIjC,IAAM,eAAuB,MAAc;AACzC,MAAI,IAAI,GACN;AACF,OACE,IAAI,IACJ,MAAM,IACN,KACG,IAAI,KAAM,MACN,IAAI,KAAK,IAAK,KAAK,OAAO,KAAK,IAAI,KAAK,KAAK,KAAM,GAAG,SAAS,EAAE,IAClE;AACP;AACD,SAAO;AACT,GAAG;AAEH,IAAM,0BAAiD,CAAC,mBAAmB,GAAG;AAC9E,IAAM,iBAAgC,wBAAwB,KAAK,EAAE;AAErE,IAAM,qBAAyC,CAAC;AAEhD,SAAS,oBAAoB,UAAiC;AAC5D,MAAI,CAAC,mBAAmB,QAAQ,GAAG;AACjC,uBAAmB,QAAQ,IAAI,wBAAwB,KAAK,QAAQ;AAAA,EACtE;AAEA,SAAO,mBAAmB,QAAQ;AACpC;AAEA,SAAS,mBAAmB,OAAkC;AAC5D,SAAO,oBAAoB,KAAK,KAAK,GAAG;AAC1C;AAEA,SAAS,sBAAsB,QAAyC;AACtE,SAAO,oBAAoB,MAAM,MAAM,GAAG;AAC5C;AAEA,SAAS,OAAO,GAAuB;AACrC,SAAO,OAAO,MAAM,YAAY,aAAa;AAC/C;AAEA,SAAS,UAAU,GAA0B;AAC3C,SAAO,OAAO,CAAC,KAAK,EAAE,aAAa,KAAK;AAC1C;AAEO,SAAS,QACd,GACA,OACA,QAAiB,OACL;AACZ,SACE,UAAU,CAAC,MACV,UAAU,SACP,EAAE,QAAQ,cAAc,IACxB,QACA,EAAE,QAAQ,mBAAmB,KAAK,CAAC,IACnC,EAAE,QAAQ,sBAAsB,KAAK,CAAC;AAE9C;AAEO,SAAS,cAAc,IAAW,QAAgB,IAAgB;AAEvE,QAAM,KAAK,IAAI,OAAO,IAAI,MAAM,QAAQ,cAAc,EAAE,CAAC,EAAE;AAC3D,UAAQ,GAAG,aAAa,IAAI,KAAK,GAAG,aAAa,MAAM,KAAK,IAAI;AAAA,IAC9D;AAAA,IACA;AAAA,EACF;AACF;AAEO,SAAS,OAAO,OAAuB;AAC5C,SAAO,CAAC,CAAC,MAAM,QAAQ;AACzB;AAEA,SAAS,SAAS,OAAkC;AAClD,SAAO,MAAM,QAAQ;AACvB;AAEO,SAAS,SAAS,OAAqB;AAC5C,MAAI,MAAM,QAAQ,aAAa,MAAM,QAAQ,cAAc;AACzD,UAAM,IAAI,MAAM,wBAAwB;AAC1C,QAAM,QAAQ,YAAY;AAC1B,SAAO;AACT;AAEO,SAAS,aACd,UACA;AAAA,EACE,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,aAAa;AACf,IAAyB,CAAC,GACjB;AACT,QAAM,IACJ,aAAa,SACT,QACE,mBAAmB,QAAQ,IAC3B,sBAAsB,QAAQ,IAChC;AACN,SAAO,MAAM,KAAK,SAAS,iBAAiB,CAAC,CAAC,EAC3C,OAAO,CAAC,OAAoB,QAAQ,EAAE,CAAC,EACvC;AAAA,IAAO,CAAC,UACP,iBACI,SAAS,KAAK,MAAM,eAAe,CAAC,OAAO,KAAK,IAChD,CAAC,OAAO,KAAK;AAAA,EACnB,EACC,IAAI,CAAC,UAAU;AACd,kBAAc,SAAS,KAAK;AAC5B,WAAO;AAAA,EACT,CAAC;AACL;","names":[]}