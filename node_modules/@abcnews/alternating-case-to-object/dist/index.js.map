{"version":3,"sources":["../src/index.ts"],"sourcesContent":["type ACTOPrimativeValue = boolean | number | string | null;\ntype ACTOPrimativeArray = boolean[] | number[] | string[];\ntype ACTOValue = ACTOPrimativeValue | ACTOPrimativeArray;\ntype ACTOObject = {\n  [key: string]: ACTOValue;\n};\n\ntype PropMap = {\n  [key: string]: string;\n};\n\ntype ACTOOptions = {\n  propMap?: PropMap;\n  arrayProps?: string[] | string;\n  noTypeGuessing?: string[] | string;\n};\n\nconst makeArray = (val: string | string[]) =>\n  typeof val === 'string' ? [val] : val;\n\nexport default function (\n  string: string,\n  { propMap = {}, arrayProps = [], noTypeGuessing = [] }: ACTOOptions = {}\n): ACTOObject {\n  const config = string.match(/[A-Z]+([0-9a-z]|$)+/g) || [];\n\n  // Convert a string to arrays for selected options.\n  arrayProps = makeArray(arrayProps);\n  noTypeGuessing = makeArray(noTypeGuessing);\n\n  const result: ACTOObject = config\n    .map((str: string) => {\n      const [, keyStr, valueStr] = str.match(/^([A-Z]+)([0-9a-z]*$)/) || [];\n\n      if (typeof keyStr !== 'string' || typeof valueStr !== 'string') {\n        throw new Error('Error reading key/value pair');\n      }\n\n      const key = propMap[keyStr.toLowerCase()] || keyStr.toLowerCase();\n\n      // Do some type guessing\n      const value: ACTOPrimativeValue = noTypeGuessing.includes(key)\n        ? valueStr\n        : parseFloat(valueStr).toString() === valueStr\n        ? parseFloat(valueStr)\n        : valueStr === 'true' || valueStr === 'yes'\n        ? true\n        : valueStr === 'false' || valueStr === 'no'\n        ? false\n        : valueStr === ''\n        ? null\n        : valueStr;\n\n      return { key, value };\n    })\n    .reduce((obj, { key, value }, _, arr) => {\n      // Get out early if we've already done this key\n      if (typeof obj[key] !== 'undefined') return obj;\n\n      const allKeyValues = arr\n        .filter(({ key: k }) => k === key)\n        .map((d) => d.value);\n\n      const makeArray = arrayProps.includes(key) || allKeyValues.length > 1;\n\n      if (makeArray) {\n        const err = new Error(\n          \"Inconsistent types in array property '\" + key + \"'\"\n        );\n\n        if (typeof value === 'string') {\n          const vals: string[] = allKeyValues.filter(\n            (d): d is string => typeof d === 'string'\n          );\n          if (vals.length !== allKeyValues.length) throw err;\n          obj[key] = vals;\n        }\n\n        if (typeof value === 'number') {\n          const vals: number[] = allKeyValues.filter(\n            (d): d is number => typeof d === 'number'\n          );\n          if (vals.length !== allKeyValues.length) throw err;\n          obj[key] = vals;\n        }\n\n        if (typeof value === 'boolean') {\n          const vals: boolean[] = allKeyValues.filter(\n            (d): d is boolean => typeof d === 'boolean'\n          );\n          if (vals.length !== allKeyValues.length) throw err;\n          obj[key] = vals;\n        }\n      } else {\n        obj[key] = value;\n      }\n\n      return obj;\n    }, {} as ACTOObject);\n\n  arrayProps.forEach((key) => {\n    if (typeof result[key] === 'undefined') {\n      result[key] = [];\n    }\n  });\n\n  return result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,IAAM,YAAY,CAAC,QACjB,OAAO,QAAQ,WAAW,CAAC,GAAG,IAAI;AAErB,SAAR,YACL,QACA,EAAE,UAAU,CAAC,GAAG,aAAa,CAAC,GAAG,iBAAiB,CAAC,EAAE,IAAiB,CAAC,GAC3D;AACZ,QAAM,SAAS,OAAO,MAAM,sBAAsB,KAAK,CAAC;AAGxD,eAAa,UAAU,UAAU;AACjC,mBAAiB,UAAU,cAAc;AAEzC,QAAM,SAAqB,OACxB,IAAI,CAAC,QAAgB;AACpB,UAAM,CAAC,EAAE,QAAQ,QAAQ,IAAI,IAAI,MAAM,uBAAuB,KAAK,CAAC;AAEpE,QAAI,OAAO,WAAW,YAAY,OAAO,aAAa,UAAU;AAC9D,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAChD;AAEA,UAAM,MAAM,QAAQ,OAAO,YAAY,CAAC,KAAK,OAAO,YAAY;AAGhE,UAAM,QAA4B,eAAe,SAAS,GAAG,IACzD,WACA,WAAW,QAAQ,EAAE,SAAS,MAAM,WACpC,WAAW,QAAQ,IACnB,aAAa,UAAU,aAAa,QACpC,OACA,aAAa,WAAW,aAAa,OACrC,QACA,aAAa,KACb,OACA;AAEJ,WAAO,EAAE,KAAK,MAAM;AAAA,EACtB,CAAC,EACA,OAAO,CAAC,KAAK,EAAE,KAAK,MAAM,GAAG,GAAG,QAAQ;AAEvC,QAAI,OAAO,IAAI,GAAG,MAAM;AAAa,aAAO;AAE5C,UAAM,eAAe,IAClB,OAAO,CAAC,EAAE,KAAK,EAAE,MAAM,MAAM,GAAG,EAChC,IAAI,CAAC,MAAM,EAAE,KAAK;AAErB,UAAMA,aAAY,WAAW,SAAS,GAAG,KAAK,aAAa,SAAS;AAEpE,QAAIA,YAAW;AACb,YAAM,MAAM,IAAI;AAAA,QACd,2CAA2C,MAAM;AAAA,MACnD;AAEA,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,OAAiB,aAAa;AAAA,UAClC,CAAC,MAAmB,OAAO,MAAM;AAAA,QACnC;AACA,YAAI,KAAK,WAAW,aAAa;AAAQ,gBAAM;AAC/C,YAAI,GAAG,IAAI;AAAA,MACb;AAEA,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,OAAiB,aAAa;AAAA,UAClC,CAAC,MAAmB,OAAO,MAAM;AAAA,QACnC;AACA,YAAI,KAAK,WAAW,aAAa;AAAQ,gBAAM;AAC/C,YAAI,GAAG,IAAI;AAAA,MACb;AAEA,UAAI,OAAO,UAAU,WAAW;AAC9B,cAAM,OAAkB,aAAa;AAAA,UACnC,CAAC,MAAoB,OAAO,MAAM;AAAA,QACpC;AACA,YAAI,KAAK,WAAW,aAAa;AAAQ,gBAAM;AAC/C,YAAI,GAAG,IAAI;AAAA,MACb;AAAA,IACF,OAAO;AACL,UAAI,GAAG,IAAI;AAAA,IACb;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,CAAe;AAErB,aAAW,QAAQ,CAAC,QAAQ;AAC1B,QAAI,OAAO,OAAO,GAAG,MAAM,aAAa;AACtC,aAAO,GAAG,IAAI,CAAC;AAAA,IACjB;AAAA,EACF,CAAC;AAED,SAAO;AACT;","names":["makeArray"]}